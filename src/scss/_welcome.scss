/* YourComponent.scss */

/* Import fonts, if necessary */
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap');

/* Define variables */
$number_of_text: 8;
$number_of_particle: 12;
$mult_num_text: 360 / $number_of_text;
$mult_num_particle: 360 / $number_of_particle;
$width: 40px;
$height: 40px;

/* General styles */
.criterion {
  font-size: 1.6rem;
  position: absolute;
  top: 50%;
  left: 50%;
  height: 0;
  width: 0;
  transform: translate(-($width / 2), -($height / 2));

  /* Background styles */
  .background {
    position: absolute;
    top: 0;
    height: 100vh;
    width: 0;
    animation: background-animation 2s ease-in-out 4s 1 normal forwards;
    
    /* Loop through backgrounds */
    @for $i from 0 through $number_of_text {
      &.background#{$i} {
        left: 12.5% * $i;
        height: 100vh;
        background-color: hsl($i * $mult_num_text, 80%, 60%);
      }
    }
  }
}

/* Define keyframes for background animation */
@keyframes background-animation {
  0% {
    width: 0;
  }
  50% {
    width: 12.5%;
    opacity: 1;
  }
  100% {
    opacity: 0;
    width: 25%;
  }
}

/* Text styles */
.text {
  position: absolute;
  width: $width;
  line-height: $height;
  opacity: 0;
  overflow: hidden;
  
  &::after {
    z-index: -1;
    content: '';
    display: inline-block;
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: $height;
  }
  
  /* Loop through texts */
  @for $i from 0 through $number_of_text {
    &.text#{$i} {
      left: -($number_of_text / 2 - $i) * $width + ($width / 2);
      top: 0;
      animation: text-animation#{$i} 1s ease-in-out 1s + ($i * 200ms) 1 normal forwards,
                 text2-animation#{$i} 2s ease-in-out 5s 1 normal forwards;
      
      &::after {
        animation: text-after-animation#{$i} 2s ease-in-out 3s 1 normal forwards;
      }
    }
  }
}

/* Define keyframes for text animations (similar to Pug) */

/* Frame styles */
.frame {
  position: absolute;
  width: $width;
  height: $height;
  border-radius: 50%;
  opacity: 0;
  
  /* Loop through frames */
  @for $i from 0 through $number_of_text {
    &.frame#{$i} {
      left: -($number_of_text / 2 - $i) * $width + ($width / 2);
      top: 0;
      animation: frame-animation#{$i} 1s ease-in-out ($i * 200ms) 1 normal forwards;
      background-color: hsl($i * $mult_num_text, 80%, 60%);
    }
  }
}

/* Define keyframes for frame animations (similar to Pug) */

/* Particle styles */
.particle {
  position: absolute;
  width: $width;
  height: $height;
  border-radius: 50%;
  
  /* Loop through particles */
  @for $i from 0 through $number_of_text {
    @for $j from 0 through $number_of_particle {
      &.particle#{$i}#{$j} {
        left: -($number_of_text / 2 - $i) * $width + ($width / 2);
        opacity: 0;
        background-color: hsl($i * $mult_num_text, 80%, 60%);
        animation: particle-animation#{$i}#{$j} 1s ease-in-out 1s + ($i * 200ms) 1 normal forwards;
      }
    }
  }
}

/* Define keyframes for particle animations (similar to Pug) */
